A thought experiment for creating arbitrarily large integers.

This was created as a learning exercise. Although it has proven somewhat
useful in a few other projects, I do not expect the value to be much
beyond educational. If you find value within, please drop me and email.

Library goals include:
 * suitability for 8-bit CPUs and embedded environments
 * no use of malloc/free, everything on the stack
 * core functionality should not even depend upon libc


Usage
-----
The ehbigint structure is defined in "ehbigint.h". This structure
contains the pointer to the underlying bytes, as well as some meta-data:

	struct ehbigint {
		unsigned char *bytes;
		size_t bytes_len;
		size_t bytes_used;
		unsigned char flags;
	};
The sign of the value is held within the flags member variable, and
can be accessed via ehbi_is_negative(bi) and ehbi_negate(bi).


Prior to use, it is the caller's responsibility to allocate the
structure and initialize it, for example:

	struct ehbigint bi;
	unsigned char bytes[BUF_LEN];

	struct ehbigint *rv = ehbi_init(&bi, &bytes, BUF_LEN);

The value will be initalized to zero. If you wish  initialize it with
a non-zero, but "long" value:

	struct ehbigint bi;
	unsigned char bytes[BUF_LEN];
	int err = 0;
	struct ehbigint *rv = ehbi_init_l(&bi, &bytes, BUF_LEN, 42, &err);

If the bytes[BUF_LEN] array is too small to hold the long value, then
NULL is returned and the *err pointer is set to a non-zero error code.

The ehbigint functions internally do not need to call malloc/free, but
if you would rather use the heap for the object itself, it's naturally
like:
	struct ehbigint *bi;
	unsigned char *bytes;
	size_t bytes_len;
	int err;

	bi = (struct ehbigint *)malloc(sizeof(struct ehbigint));
	bytes_len = 20;
	bytes = (unsigned char *)malloc(bytes_len);
	err = ehbi_init(bi, bytes, bytes_len);

The caller is, of course, responsible for freeing the objects.


Most ehbigint functions return an error code. The "ehbigint.h" header
defines the meaning of the error codes. Like POXIX return codes, a value
of 0 is success. Typically a non-zero error code will be the result of
programmer error, although EHBI_BYTES_TOO_SMALL_FOR_CARRY for example
denotes that an overflow would have occured.


Set value
---------
The structure can be set to a value in a number of ways.

It can be set by a decimal string:
	const char *dstr = "1949183158370983519073011571092751";
	err = ehbi_set_decimal_string(bi, dstr, strlen(dstr));

or a hexidecimal string:
	const char *hex = "0x23052AC258940FF12342FFFFFFFFA1231";
	err = ehbi_set_hex_string(bi, hex, strlen(hex));

or a binary string:
	const char *binstr = "0b01110101110101010000001111100010";
	err = ehbi_set_binary_string(bi, binstr, strlen(binstr));

or an long:
	long val = 123412L;
	err = ehbi_set_l(bi, val);

or another instance of struct ehbigint:
	err = ehbi_set(bi, bi_other);


Zero
----
Set a value to zero, in place:

	ehbi_zero(bi);


Negation
--------
Negate a value, in place:

	ehbi_negate(bi);


Addition
--------
Populate a result from adding two passed in:

	int err = 0;
	struct ehbigint *rv = ehbi_add(result, bi1, bi2, &err);

or add a long:

	struct ehbigint *rv = ehbi_add_l(result, bi, 23, &err);


Increment
---------
Adding to an existing value, modifying in place:

	int err = 0;
	ehbi_inc(bi, bi_amount, &err);

Add to an existing value using an long:

	int err = 0;
	ehbi_inc_l(bi, 23, &err);


Subtraction
-----------
Populate a result with the value of the second param minus the third:

	int err = 0;
	ehbi_subtract(result, bi1, bi2, &err);

Or subtract a long:

	int err = 0;
	ehbi_subtract_l(result, bi1, 7, &err);


Decrement
---------
Decrement the value in place:

	ehbi_dec(bi, bi_amount, &err);

Decrement values in place with a long:

	ehbi_dec_l(bi, 2, &err);


Multiplication
--------------
Populate the first ehbigint with the sum of the second multiplied by the
third:

	ehbi_mul(result, bi1, bi2, &err);

or with a long:

	ehbi_mul_l(result, bi1, 3L, &err);


Division
--------
Populate the quotient and remainder with the results of the numerator
divided by the denominator:

	ehbi_div(quotient, remainder, numerator, denominator, &err);

or:

	ehbi_div_l(quotient, remainder, numerator, 10, &err);


Shifting
--------
Shift the value of the ehbigint up by num_bits number of bits:

	unsigned long overflow = 0;
	ehbi_shift_left(bi, num_bits, &overflow);

or down by a number of bits:

	ehbi_shift_right(bi, num_bits);

Bits shifted off the byte array will be "lost" ... in the case of the
ehbi_shift_left, the caller may optionally pass a pointer which will
be set to the number of bits which were "lost" up to the first set bit.


Square Root
-----------
Obtain the closest integer less than the sqare root, and the remainder:

	ehbi_sqrt(sqrt, remainder, bi, &err);


Exponents
---------
Populate the first ehbigint result with the value of the base
raised to the power of the exponent:

	ehbi_exp(result, base, exponent, &err);

or:

	ehbi_exp_l(result, base, 11, &err);


Modular Exponentiation
----------------------
Populate the first ehbigint result with the value of the base
   raised to the power of the exponent mod the modulus

	ehbi_exp_mod(result, base, exponent, modulus, &err);

or:

	ehbi_exp_mod_l(result, base, bi_exponent, 4, &err);

or:

	ehbi_exp_mod_ll(result, base, 4096L, 31L, &err);


Binomial Coefficients
---------------------
   Knuth TAoCP vol 1
   1.2.6 Binomial Coefficients
     / n \    n(n-1)...(n-k+1)
    (     ) = ----------------
     \ k /       k(k-1)...1

Populates the first ehbigint result with the number of combinations
of n objects taken k at a time, disregarding order

	ehbi_n_choose_k(result, n, k, &err);

or:

	ehbi_n_choose_k_l(result, n, 5L, &err);

or:

	ehbi_n_choose_k_ll(result, 52L, 26L, &err);


Comparison
----------
The comparison functions return a result, and pass the return code to
the functions as an "out" paramter:

	result = ehbi_equals(bi1, bi2);
	result = ehbi_equals_l(bi1, 31L);
	result = ehbi_less_than(bi1, bi2);
	result = ehbi_less_than_l(bi1, 73L);
	result = ehbi_greater_than(bi1, bi2);
	result = ehbi_greater_than_l(bi1, 321L);
	result = ehbi_compare(bi1, bi2);
	result = ehbi_compare_l(bi1, 69L);
	result = ehbi_is_negative(bi);
	result = ehbi_is_odd(bi);

With the result, standard if statements can be made:

	if (ehbi_equals(bi1, bi2)) {
		printf("bi1 == bi2\n");
	}

The result is always false if an error condition occurs, for exmaple if
a NULL pointer is passed to the function.


Primality
---------
Find out if a number is probably prime, uses the second parameter
(accuracy) to determine strength of the test:

	accuracy = 15;
	is_prime = ehbi_is_probably_prime(bi, accuracy, &err);


Output
------
Populate the passed in buffer with a hex string representation of the
ehbigint:

	int err = 0;
	printf("%s\n", ehbi_to_hex_string(bi, buf, buf_len, &err));

Populates the passed in buffer with a decimal string representation of
the ehbigint:

	int err = 0;
	printf("%s\n", ehbi_to_decimal_string(bi, buf, buf_len, &err));

Populates the passed in buffer with a binary string representation of
the ehbigint:

	int err = 0;
	printf("%s\n", ehbi_to_binary_string(bi, buf, buf_len, &err));


Dependencies
-------
One test ("tests/test-compare-with-gmp.c") depends upon libgmp
 (GNU Multiple Precision Arithmetic Library) https://gmplib.org/


Packaging
---------
autoreconf -iv &&
 ./configure &&
 make &&
 make distcheck &&
 echo "Success."


License
-------
GNU Lesser General Public License (LGPL), version 3 or later.
See COPYING and COPYING.LESSER for details.
